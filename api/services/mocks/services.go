// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	internalclient "github.com/shellhub-io/shellhub/pkg/api/internalclient"
	mock "github.com/stretchr/testify/mock"

	models "github.com/shellhub-io/shellhub/pkg/models"

	query "github.com/shellhub-io/shellhub/pkg/api/query"

	requests "github.com/shellhub-io/shellhub/pkg/api/requests"

	responses "github.com/shellhub-io/shellhub/pkg/api/responses"

	rsa "crypto/rsa"

	template "text/template"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddNamespaceUser provides a mock function with given fields: ctx, memberUsername, memberRole, tenantID, userID
func (_m *Service) AddNamespaceUser(ctx context.Context, memberUsername string, memberRole string, tenantID string, userID string) (*models.Namespace, error) {
	ret := _m.Called(ctx, memberUsername, memberRole, tenantID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddNamespaceUser")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*models.Namespace, error)); ok {
		return rf(ctx, memberUsername, memberRole, tenantID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *models.Namespace); ok {
		r0 = rf(ctx, memberUsername, memberRole, tenantID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, memberUsername, memberRole, tenantID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPublicKeyTag provides a mock function with given fields: ctx, tenant, fingerprint, tag
func (_m *Service) AddPublicKeyTag(ctx context.Context, tenant string, fingerprint string, tag string) error {
	ret := _m.Called(ctx, tenant, fingerprint, tag)

	if len(ret) == 0 {
		panic("no return value specified for AddPublicKeyTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenant, fingerprint, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthCacheToken provides a mock function with given fields: ctx, tenant, id, token
func (_m *Service) AuthCacheToken(ctx context.Context, tenant string, id string, token string) error {
	ret := _m.Called(ctx, tenant, id, token)

	if len(ret) == 0 {
		panic("no return value specified for AuthCacheToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenant, id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthDevice provides a mock function with given fields: ctx, req, remoteAddr
func (_m *Service) AuthDevice(ctx context.Context, req requests.DeviceAuth, remoteAddr string) (*models.DeviceAuthResponse, error) {
	ret := _m.Called(ctx, req, remoteAddr)

	if len(ret) == 0 {
		panic("no return value specified for AuthDevice")
	}

	var r0 *models.DeviceAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.DeviceAuth, string) (*models.DeviceAuthResponse, error)); ok {
		return rf(ctx, req, remoteAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.DeviceAuth, string) *models.DeviceAuthResponse); ok {
		r0 = rf(ctx, req, remoteAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeviceAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.DeviceAuth, string) error); ok {
		r1 = rf(ctx, req, remoteAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthGetToken provides a mock function with given fields: ctx, id, mfa
func (_m *Service) AuthGetToken(ctx context.Context, id string, mfa bool) (*models.UserAuthResponse, error) {
	ret := _m.Called(ctx, id, mfa)

	if len(ret) == 0 {
		panic("no return value specified for AuthGetToken")
	}

	var r0 *models.UserAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*models.UserAuthResponse, error)); ok {
		return rf(ctx, id, mfa)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *models.UserAuthResponse); ok {
		r0 = rf(ctx, id, mfa)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, id, mfa)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthIsCacheToken provides a mock function with given fields: ctx, tenant, id
func (_m *Service) AuthIsCacheToken(ctx context.Context, tenant string, id string) (bool, error) {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthIsCacheToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, tenant, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthMFA provides a mock function with given fields: ctx, id
func (_m *Service) AuthMFA(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthMFA")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthPublicKey provides a mock function with given fields: ctx, req
func (_m *Service) AuthPublicKey(ctx context.Context, req requests.PublicKeyAuth) (*models.PublicKeyAuthResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AuthPublicKey")
	}

	var r0 *models.PublicKeyAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.PublicKeyAuth) (*models.PublicKeyAuthResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.PublicKeyAuth) *models.PublicKeyAuthResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKeyAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.PublicKeyAuth) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthSwapToken provides a mock function with given fields: ctx, ID, tenant
func (_m *Service) AuthSwapToken(ctx context.Context, ID string, tenant string) (*models.UserAuthResponse, error) {
	ret := _m.Called(ctx, ID, tenant)

	if len(ret) == 0 {
		panic("no return value specified for AuthSwapToken")
	}

	var r0 *models.UserAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.UserAuthResponse, error)); ok {
		return rf(ctx, ID, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.UserAuthResponse); ok {
		r0 = rf(ctx, ID, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ID, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUncacheToken provides a mock function with given fields: ctx, tenant, id
func (_m *Service) AuthUncacheToken(ctx context.Context, tenant string, id string) error {
	ret := _m.Called(ctx, tenant, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthUncacheToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenant, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthUser provides a mock function with given fields: ctx, req, sourceIP
func (_m *Service) AuthUser(ctx context.Context, req *requests.UserAuth, sourceIP string) (*models.UserAuthResponse, int64, error) {
	ret := _m.Called(ctx, req, sourceIP)

	if len(ret) == 0 {
		panic("no return value specified for AuthUser")
	}

	var r0 *models.UserAuthResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *requests.UserAuth, string) (*models.UserAuthResponse, int64, error)); ok {
		return rf(ctx, req, sourceIP)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.UserAuth, string) *models.UserAuthResponse); ok {
		r0 = rf(ctx, req, sourceIP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.UserAuth, string) int64); ok {
		r1 = rf(ctx, req, sourceIP)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *requests.UserAuth, string) error); ok {
		r2 = rf(ctx, req, sourceIP)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthUserInfo provides a mock function with given fields: ctx, username, tenant, token
func (_m *Service) AuthUserInfo(ctx context.Context, username string, tenant string, token string) (*models.UserAuthResponse, error) {
	ret := _m.Called(ctx, username, tenant, token)

	if len(ret) == 0 {
		panic("no return value specified for AuthUserInfo")
	}

	var r0 *models.UserAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*models.UserAuthResponse, error)); ok {
		return rf(ctx, username, tenant, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.UserAuthResponse); ok {
		r0 = rf(ctx, username, tenant, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, tenant, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingEvaluate provides a mock function with given fields: _a0, _a1
func (_m *Service) BillingEvaluate(_a0 internalclient.Client, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BillingEvaluate")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(internalclient.Client, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(internalclient.Client, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(internalclient.Client, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BillingReport provides a mock function with given fields: _a0, _a1, _a2
func (_m *Service) BillingReport(_a0 internalclient.Client, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for BillingReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(internalclient.Client, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAPIKey provides a mock function with given fields: ctx, userID, tenant, key, req
func (_m *Service) CreateAPIKey(ctx context.Context, userID string, tenant string, key string, req *requests.CreateAPIKey) (string, error) {
	ret := _m.Called(ctx, userID, tenant, key, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *requests.CreateAPIKey) (string, error)); ok {
		return rf(ctx, userID, tenant, key, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *requests.CreateAPIKey) string); ok {
		r0 = rf(ctx, userID, tenant, key, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *requests.CreateAPIKey) error); ok {
		r1 = rf(ctx, userID, tenant, key, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceTag provides a mock function with given fields: ctx, uid, tag
func (_m *Service) CreateDeviceTag(ctx context.Context, uid models.UID, tag string) error {
	ret := _m.Called(ctx, uid, tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNamespace provides a mock function with given fields: ctx, namespace, userID
func (_m *Service) CreateNamespace(ctx context.Context, namespace requests.NamespaceCreate, userID string) (*models.Namespace, error) {
	ret := _m.Called(ctx, namespace, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.NamespaceCreate, string) (*models.Namespace, error)); ok {
		return rf(ctx, namespace, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.NamespaceCreate, string) *models.Namespace); ok {
		r0 = rf(ctx, namespace, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.NamespaceCreate, string) error); ok {
		r1 = rf(ctx, namespace, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateKey provides a mock function with given fields: ctx
func (_m *Service) CreatePrivateKey(ctx context.Context) (*models.PrivateKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateKey")
	}

	var r0 *models.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.PrivateKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.PrivateKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublicKey provides a mock function with given fields: ctx, req, tenant
func (_m *Service) CreatePublicKey(ctx context.Context, req requests.PublicKeyCreate, tenant string) (*responses.PublicKeyCreate, error) {
	ret := _m.Called(ctx, req, tenant)

	if len(ret) == 0 {
		panic("no return value specified for CreatePublicKey")
	}

	var r0 *responses.PublicKeyCreate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.PublicKeyCreate, string) (*responses.PublicKeyCreate, error)); ok {
		return rf(ctx, req, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.PublicKeyCreate, string) *responses.PublicKeyCreate); ok {
		r0 = rf(ctx, req, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.PublicKeyCreate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.PublicKeyCreate, string) error); ok {
		r1 = rf(ctx, req, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *Service) CreateSession(ctx context.Context, session requests.SessionCreate) (*models.Session, error) {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.SessionCreate) (*models.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.SessionCreate) *models.Session); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.SessionCreate) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateSession provides a mock function with given fields: ctx, uid
func (_m *Service) DeactivateSession(ctx context.Context, uid models.UID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAPIKey provides a mock function with given fields: ctx, id, tenantID
func (_m *Service) DeleteAPIKey(ctx context.Context, id string, tenantID string) error {
	ret := _m.Called(ctx, id, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevice provides a mock function with given fields: ctx, uid, tenant
func (_m *Service) DeleteDevice(ctx context.Context, uid models.UID, tenant string) error {
	ret := _m.Called(ctx, uid, tenant)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNamespace provides a mock function with given fields: ctx, tenantID
func (_m *Service) DeleteNamespace(ctx context.Context, tenantID string) error {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePublicKey provides a mock function with given fields: ctx, fingerprint, tenant
func (_m *Service) DeletePublicKey(ctx context.Context, fingerprint string, tenant string) error {
	ret := _m.Called(ctx, fingerprint, tenant)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, fingerprint, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: ctx, tenant, tag
func (_m *Service) DeleteTag(ctx context.Context, tenant string, tag string) error {
	ret := _m.Called(ctx, tenant, tag)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tenant, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceHeartbeat provides a mock function with given fields: ctx, uid
func (_m *Service) DeviceHeartbeat(ctx context.Context, uid models.UID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeviceHeartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditAPIKey provides a mock function with given fields: ctx, changes
func (_m *Service) EditAPIKey(ctx context.Context, changes *requests.APIKeyChanges) (*models.APIKey, error) {
	ret := _m.Called(ctx, changes)

	if len(ret) == 0 {
		panic("no return value specified for EditAPIKey")
	}

	var r0 *models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *requests.APIKeyChanges) (*models.APIKey, error)); ok {
		return rf(ctx, changes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.APIKeyChanges) *models.APIKey); ok {
		r0 = rf(ctx, changes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.APIKeyChanges) error); ok {
		r1 = rf(ctx, changes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditNamespace provides a mock function with given fields: ctx, req
func (_m *Service) EditNamespace(ctx context.Context, req *requests.NamespaceEdit) (*models.Namespace, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EditNamespace")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *requests.NamespaceEdit) (*models.Namespace, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.NamespaceEdit) *models.Namespace); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.NamespaceEdit) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditNamespaceUser provides a mock function with given fields: ctx, tenantID, userID, memberID, memberNewRole
func (_m *Service) EditNamespaceUser(ctx context.Context, tenantID string, userID string, memberID string, memberNewRole string) error {
	ret := _m.Called(ctx, tenantID, userID, memberID, memberNewRole)

	if len(ret) == 0 {
		panic("no return value specified for EditNamespaceUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, tenantID, userID, memberID, memberNewRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditSessionRecordStatus provides a mock function with given fields: ctx, sessionRecord, tenantID
func (_m *Service) EditSessionRecordStatus(ctx context.Context, sessionRecord bool, tenantID string) error {
	ret := _m.Called(ctx, sessionRecord, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for EditSessionRecordStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, string) error); ok {
		r0 = rf(ctx, sessionRecord, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvaluateKeyFilter provides a mock function with given fields: ctx, key, dev
func (_m *Service) EvaluateKeyFilter(ctx context.Context, key *models.PublicKey, dev models.Device) (bool, error) {
	ret := _m.Called(ctx, key, dev)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateKeyFilter")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PublicKey, models.Device) (bool, error)); ok {
		return rf(ctx, key, dev)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PublicKey, models.Device) bool); ok {
		r0 = rf(ctx, key, dev)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PublicKey, models.Device) error); ok {
		r1 = rf(ctx, key, dev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateKeyUsername provides a mock function with given fields: ctx, key, username
func (_m *Service) EvaluateKeyUsername(ctx context.Context, key *models.PublicKey, username string) (bool, error) {
	ret := _m.Called(ctx, key, username)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateKeyUsername")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PublicKey, string) (bool, error)); ok {
		return rf(ctx, key, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PublicKey, string) bool); ok {
		r0 = rf(ctx, key, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PublicKey, string) error); ok {
		r1 = rf(ctx, key, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAPIKeyByUID provides a mock function with given fields: ctx, id
func (_m *Service) GetAPIKeyByUID(ctx context.Context, id string) (*models.APIKey, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKeyByUID")
	}

	var r0 *models.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.APIKey, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.APIKey); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: ctx, uid
func (_m *Service) GetDevice(ctx context.Context, uid models.UID) (*models.Device, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) (*models.Device, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) *models.Device); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceByPublicURLAddress provides a mock function with given fields: ctx, address
func (_m *Service) GetDeviceByPublicURLAddress(ctx context.Context, address string) (*models.Device, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceByPublicURLAddress")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Device, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Device); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, tenantID
func (_m *Service) GetNamespace(ctx context.Context, tenantID string) (*models.Namespace, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Namespace, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Namespace); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKey provides a mock function with given fields: ctx, fingerprint, tenant
func (_m *Service) GetPublicKey(ctx context.Context, fingerprint string, tenant string) (*models.PublicKey, error) {
	ret := _m.Called(ctx, fingerprint, tenant)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *models.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.PublicKey, error)); ok {
		return rf(ctx, fingerprint, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.PublicKey); ok {
		r0 = rf(ctx, fingerprint, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, fingerprint, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, uid
func (_m *Service) GetSession(ctx context.Context, uid models.UID) (*models.Session, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) (*models.Session, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) *models.Session); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionRecord provides a mock function with given fields: ctx, tenantID
func (_m *Service) GetSessionRecord(ctx context.Context, tenantID string) (bool, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionRecord")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: ctx
func (_m *Service) GetStats(ctx context.Context) (*models.Stats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *models.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Stats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: ctx, tenant
func (_m *Service) GetTags(ctx context.Context, tenant string) ([]string, int, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, int, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tenant)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// KeepAliveSession provides a mock function with given fields: ctx, uid
func (_m *Service) KeepAliveSession(ctx context.Context, uid models.UID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for KeepAliveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAPIKeys provides a mock function with given fields: ctx, req
func (_m *Service) ListAPIKeys(ctx context.Context, req *requests.APIKeyList) ([]models.APIKey, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListAPIKeys")
	}

	var r0 []models.APIKey
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *requests.APIKeyList) ([]models.APIKey, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.APIKeyList) []models.APIKey); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.APIKeyList) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *requests.APIKeyList) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListDevices provides a mock function with given fields: ctx, tenant, status, paginator, filter, sorter
func (_m *Service) ListDevices(ctx context.Context, tenant string, status models.DeviceStatus, paginator query.Paginator, filter query.Filters, sorter query.Sorter) ([]models.Device, int, error) {
	ret := _m.Called(ctx, tenant, status, paginator, filter, sorter)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 []models.Device
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter) ([]models.Device, int, error)); ok {
		return rf(ctx, tenant, status, paginator, filter, sorter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter) []models.Device); ok {
		r0 = rf(ctx, tenant, status, paginator, filter, sorter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter) int); ok {
		r1 = rf(ctx, tenant, status, paginator, filter, sorter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, models.DeviceStatus, query.Paginator, query.Filters, query.Sorter) error); ok {
		r2 = rf(ctx, tenant, status, paginator, filter, sorter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListNamespaces provides a mock function with given fields: ctx, paginator, filters, export
func (_m *Service) ListNamespaces(ctx context.Context, paginator query.Paginator, filters query.Filters, export bool) ([]models.Namespace, int, error) {
	ret := _m.Called(ctx, paginator, filters, export)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 []models.Namespace
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator, query.Filters, bool) ([]models.Namespace, int, error)); ok {
		return rf(ctx, paginator, filters, export)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator, query.Filters, bool) []models.Namespace); ok {
		r0 = rf(ctx, paginator, filters, export)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator, query.Filters, bool) int); ok {
		r1 = rf(ctx, paginator, filters, export)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator, query.Filters, bool) error); ok {
		r2 = rf(ctx, paginator, filters, export)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPublicKeys provides a mock function with given fields: ctx, paginator
func (_m *Service) ListPublicKeys(ctx context.Context, paginator query.Paginator) ([]models.PublicKey, int, error) {
	ret := _m.Called(ctx, paginator)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicKeys")
	}

	var r0 []models.PublicKey
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) ([]models.PublicKey, int, error)); ok {
		return rf(ctx, paginator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) []models.PublicKey); ok {
		r0 = rf(ctx, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator) int); ok {
		r1 = rf(ctx, paginator)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator) error); ok {
		r2 = rf(ctx, paginator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListSessions provides a mock function with given fields: ctx, paginator
func (_m *Service) ListSessions(ctx context.Context, paginator query.Paginator) ([]models.Session, int, error) {
	ret := _m.Called(ctx, paginator)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 []models.Session
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) ([]models.Session, int, error)); ok {
		return rf(ctx, paginator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Paginator) []models.Session); ok {
		r0 = rf(ctx, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Paginator) int); ok {
		r1 = rf(ctx, paginator)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, query.Paginator) error); ok {
		r2 = rf(ctx, paginator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LookupDevice provides a mock function with given fields: ctx, namespace, name
func (_m *Service) LookupDevice(ctx context.Context, namespace string, name string) (*models.Device, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for LookupDevice")
	}

	var r0 *models.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Device, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Device); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OffineDevice provides a mock function with given fields: ctx, uid, online
func (_m *Service) OffineDevice(ctx context.Context, uid models.UID, online bool) error {
	ret := _m.Called(ctx, uid, online)

	if len(ret) == 0 {
		panic("no return value specified for OffineDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, bool) error); ok {
		r0 = rf(ctx, uid, online)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublicKey provides a mock function with given fields:
func (_m *Service) PublicKey() *rsa.PublicKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 *rsa.PublicKey
	if rf, ok := ret.Get(0).(func() *rsa.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PublicKey)
		}
	}

	return r0
}

// RemoveDeviceTag provides a mock function with given fields: ctx, uid, tag
func (_m *Service) RemoveDeviceTag(ctx context.Context, uid models.UID, tag string) error {
	ret := _m.Called(ctx, uid, tag)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDeviceTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNamespaceUser provides a mock function with given fields: ctx, tenantID, memberID, userID
func (_m *Service) RemoveNamespaceUser(ctx context.Context, tenantID string, memberID string, userID string) (*models.Namespace, error) {
	ret := _m.Called(ctx, tenantID, memberID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNamespaceUser")
	}

	var r0 *models.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*models.Namespace, error)); ok {
		return rf(ctx, tenantID, memberID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.Namespace); ok {
		r0 = rf(ctx, tenantID, memberID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tenantID, memberID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePublicKeyTag provides a mock function with given fields: ctx, tenant, fingerprint, tag
func (_m *Service) RemovePublicKeyTag(ctx context.Context, tenant string, fingerprint string, tag string) error {
	ret := _m.Called(ctx, tenant, fingerprint, tag)

	if len(ret) == 0 {
		panic("no return value specified for RemovePublicKeyTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenant, fingerprint, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameDevice provides a mock function with given fields: ctx, uid, name, tenant
func (_m *Service) RenameDevice(ctx context.Context, uid models.UID, name string, tenant string) error {
	ret := _m.Called(ctx, uid, name, tenant)

	if len(ret) == 0 {
		panic("no return value specified for RenameDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string, string) error); ok {
		r0 = rf(ctx, uid, name, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameTag provides a mock function with given fields: ctx, tenant, oldTag, newTag
func (_m *Service) RenameTag(ctx context.Context, tenant string, oldTag string, newTag string) error {
	ret := _m.Called(ctx, tenant, oldTag, newTag)

	if len(ret) == 0 {
		panic("no return value specified for RenameTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tenant, oldTag, newTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDevicePosition provides a mock function with given fields: ctx, uid, ip
func (_m *Service) SetDevicePosition(ctx context.Context, uid models.UID, ip string) error {
	ret := _m.Called(ctx, uid, ip)

	if len(ret) == 0 {
		panic("no return value specified for SetDevicePosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, string) error); ok {
		r0 = rf(ctx, uid, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSessionAuthenticated provides a mock function with given fields: ctx, uid, authenticated
func (_m *Service) SetSessionAuthenticated(ctx context.Context, uid models.UID, authenticated bool) error {
	ret := _m.Called(ctx, uid, authenticated)

	if len(ret) == 0 {
		panic("no return value specified for SetSessionAuthenticated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, bool) error); ok {
		r0 = rf(ctx, uid, authenticated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: ctx, req
func (_m *Service) Setup(ctx context.Context, req requests.Setup) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.Setup) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemDownloadInstallScript provides a mock function with given fields: ctx, req
func (_m *Service) SystemDownloadInstallScript(ctx context.Context, req requests.SystemInstallScript) (*template.Template, map[string]interface{}, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SystemDownloadInstallScript")
	}

	var r0 *template.Template
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.SystemInstallScript) (*template.Template, map[string]interface{}, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.SystemInstallScript) *template.Template); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*template.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.SystemInstallScript) map[string]interface{}); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, requests.SystemInstallScript) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SystemGetInfo provides a mock function with given fields: ctx, req
func (_m *Service) SystemGetInfo(ctx context.Context, req requests.SystemGetInfo) (*models.SystemInfo, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SystemGetInfo")
	}

	var r0 *models.SystemInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.SystemGetInfo) (*models.SystemInfo, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.SystemGetInfo) *models.SystemInfo); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SystemInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.SystemGetInfo) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataUser provides a mock function with given fields: ctx, id, userData
func (_m *Service) UpdateDataUser(ctx context.Context, id string, userData models.UserData) ([]string, error) {
	ret := _m.Called(ctx, id, userData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataUser")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UserData) ([]string, error)); ok {
		return rf(ctx, id, userData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UserData) []string); ok {
		r0 = rf(ctx, id, userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.UserData) error); ok {
		r1 = rf(ctx, id, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: ctx, tenant, uid, name, publicURL
func (_m *Service) UpdateDevice(ctx context.Context, tenant string, uid models.UID, name *string, publicURL *bool) error {
	ret := _m.Called(ctx, tenant, uid, name, publicURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UID, *string, *bool) error); ok {
		r0 = rf(ctx, tenant, uid, name, publicURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceStatus provides a mock function with given fields: ctx, tenant, uid, status
func (_m *Service) UpdateDeviceStatus(ctx context.Context, tenant string, uid models.UID, status models.DeviceStatus) error {
	ret := _m.Called(ctx, tenant, uid, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UID, models.DeviceStatus) error); ok {
		r0 = rf(ctx, tenant, uid, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeviceTag provides a mock function with given fields: ctx, uid, tags
func (_m *Service) UpdateDeviceTag(ctx context.Context, uid models.UID, tags []string) error {
	ret := _m.Called(ctx, uid, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UID, []string) error); ok {
		r0 = rf(ctx, uid, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePasswordUser provides a mock function with given fields: ctx, id, currentPassword, newPassword
func (_m *Service) UpdatePasswordUser(ctx context.Context, id string, currentPassword string, newPassword string) error {
	ret := _m.Called(ctx, id, currentPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePasswordUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, currentPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePublicKey provides a mock function with given fields: ctx, fingerprint, tenant, key
func (_m *Service) UpdatePublicKey(ctx context.Context, fingerprint string, tenant string, key requests.PublicKeyUpdate) (*models.PublicKey, error) {
	ret := _m.Called(ctx, fingerprint, tenant, key)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicKey")
	}

	var r0 *models.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, requests.PublicKeyUpdate) (*models.PublicKey, error)); ok {
		return rf(ctx, fingerprint, tenant, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, requests.PublicKeyUpdate) *models.PublicKey); ok {
		r0 = rf(ctx, fingerprint, tenant, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, requests.PublicKeyUpdate) error); ok {
		r1 = rf(ctx, fingerprint, tenant, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePublicKeyTags provides a mock function with given fields: ctx, tenant, fingerprint, tags
func (_m *Service) UpdatePublicKeyTags(ctx context.Context, tenant string, fingerprint string, tags []string) error {
	ret := _m.Called(ctx, tenant, fingerprint, tags)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicKeyTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, tenant, fingerprint, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
